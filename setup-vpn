#!/bin/bash
#
# setup-vpn: Install and configure OpenVPN server or client on Raspberry Pi
#
# Written March 2021 by FRC Team 2220 (team2220@eaganrobotics.com)
#
# Before running this script, perform the following steps on any computer
# connected to the Internet:
#  1. Bring up your favorite web browser and visit https://github.com
#  2. Log into your Github account (or sign up for a new one) making sure
#     your email address has been verified.
#  3. Create a new private repository which will hold your VPN configuration
#     by doing the following:
#	- Click the green New button
#	- Choose a repository name (e.g. vpnconfig)
#	- Enter a description (e.g. VPN configuration files)
#	- Select Private (since these files will allow access to your VPN)
#	- Click the green "Create repository button"
#  4. Create a personal access token to allow the VPN setup script to access
#     it by doing the following:
#	- In the upper-right corner, click your profile photo
#	- Click Settings
#	- In the left sidebar, click Developer settings
#	- Click "Personal access tokens"
#	- Click "Generate new token"
#	- Give token a descriptive name (e.g. VPN setup for Team 2220)
#	- Select scope 'repo'
#	- Click Generate token
#	- Click the symbol to the right of the hex token to copy to clipboard
#	- Paste the token into a file for use later on the Raspberry Pi
#
# Now power up each Raspberry Pi and run the VPN setup script on each one
# (making sure to set up the VPN server first) by bringing up a terminal
# window and entering the following commands:
#	rm -rf robot-vpn
#	git clone https://github.com/team2220/robot-vpn
#	robot-vpn/setup-vpn
# Follow all the prompts in order to set up each Raspberry Pi as either the
# VPN server, robot client, driver station client, or an auxiliary client.
#
# To uninstall at a later date you can simply run these commands:
#	robot-vpn/uninstall-vpn
#	rm -rf robot-vpn

#
# Helper functions 
#
die() { echo -e "\e[1;31m$1\e[0m" 1>&2; exit 1; } # exit w/error message in red
msg() { echo -e "\e[1;34m$1\e[0m" 1>&2; }	# print message in blue 
prompt() { echo -ne "\e[1;33m$1\e[0m" 1>&2; read $2; } # issue prompt in yellow

if [ $EUID -ne 0 ]; then
    exec sudo "$0" "$@"
fi

#
# Function to set up a VPN client
#
setup_client()
{
    if [ ! -f $PI_HOME/$GITHUB_REPO/VPN_Server_ipaddr ]; then
	msg "Error: The VPN server must be set up before any of the clients."
	die "Please re-run this client setup after the VPN server is set up."
    fi

    case $SETUP_TYPE in

	ds)
	    BRIDGE_IPADDR=$TEAM_NETWORK.253
	    CLIENT_ID="DS_VPN_Client"
	    ;;
	robot)
	    BRIDGE_IPADDR=$TEAM_NETWORK.251
	    CLIENT_ID="Robot_VPN_Client"
	    ;;
	aux)
	    BRIDGE_IPADDR=$TEAM_NETWORK.252
	    CLIENT_ID="Aux_VPN_Client"
	    ;;
	*)
	    die "Bad client type: $SETUP_TYPE"
	    ;;
    esac

    #
    # Initialize PKI files
    #
    msg "Initializing PKI files..."
    rm -rf $EDIR
    cp -R /usr/share/easy-rsa $EDIR
    mkdir $PKIDIR $PKIDIR/issued $PKIDIR/private $PKIDIR/reqs
    cp $EDIR/openssl-easyrsa.cnf $PKIDIR

    #
    # Load client configuration files from private Github repo
    #
    msg "Installing configuration files for $CLIENT_ID ..."
    cp $PI_HOME/robot-vpn/openvpn.conf-$CLIENT_ID $VDIR/openvpn.conf
    cd $PI_HOME/$GITHUB_REPO
    SERVER_IPADDR=`head -1 VPN_Server_ipaddr`
    SERVER_PORT=`tail +2 VPN_Server_ipaddr`
    msg "Using server IP address $SERVER_IPADDR, port $SERVER_PORT"
    sed -i "s/^remote .*$/remote $SERVER_IPADDR $SERVER_PORT/" $VDIR/openvpn.conf
    cp ca.crt ta.key $PKIDIR
    cp $CLIENT_ID.crt $PKIDIR/issued
    cp $CLIENT_ID.key $PKIDIR/private
    cp $PI_HOME/robot-vpn/bridge.sh /etc/init.d/bridge
    sed -i "s/10.TE.AM.251/$BRIDGE_IPADDR/g" /etc/init.d/bridge
    sed -i "s/10.TE.AM/$TEAM_NETWORK/g" /etc/init.d/bridge
    rm -f /etc/rc2.d/S01bridge
    ln -s ../init.d/bridge /etc/rc2.d/S01bridge
    chmod a+rx /etc/init.d/bridge
    echo "denyinterfaces eth0" >> /etc/dhcpcd.conf

    msg "$CLIENT_ID successfully set up; type 'sudo reboot' to start VPN"
}

#
# Function to set up VPN server
#
setup_server()
{
    #
    # Make sure we are not attempting to install a second VPN server
    #
    if [ -f $PI_HOME/$GITHUB_REPO/VPN_Server_ipaddr ]; then
	die "VPN Server has already been set up; use uninstall-vpn to override"
    fi

    #
    # Prompt for VPN server IP address / host name and port number
    #
    msg "The VPN server will be directly reachable on the Internet or"
    msg "will be reachable through a router to its private (NAT) address."
    msg "It must be a publicly reachable IP address or host name."

    TMPFILE=/tmp/public_ip.$$
    wget --default-page=$TMPFILE --quiet https://checkip.amazonaws.com
    if [ -f $TMPFILE ]; then
	SERVER_IPADDR=`cat $TMPFILE`
	msg "Detected your router's public IP address is $SERVER_IPADDR"
    else
	SERVER_IPADDR=localhost
    fi
    rm -f $TMPFILE

    prompt "Enter the VPN server IP address or host name [$SERVER_IPADDR]: " REPLY
    if [ "$REPLY" != "" ]; then
	SERVER_IPADDR=$REPLY
    fi

    SERVER_PORT=1194
    prompt "Enter the VPN server UDP port number [$SERVER_PORT]: " REPLY
    if [ "$REPLY" != "" ]; then
	SERVER_PORT=$REPLY
    fi

    #
    # Prompt for SSL certificate identifiers
    # COUNTRY, STATE, CITY, ORG, EMAIL, and OU, e.g.:
    # US, Minnesota, Eagan, EHS Robotics, ca@eaganrobotics.com, Team 2220
    #
    rm -rf $EDIR
    cp -R /usr/share/easy-rsa $EDIR/

    #
    # Make vars file by prompting for Certificate Authority (CA) parameters
    #
    cd $EDIR

    COUNTRY="US"
    STATE="Minnesota"
    CITY="Eagan"
    ORG="EHS Robotics"
    EMAIL="ca@eaganrobotics.com"
    OU="Team $TEAM_NUMBER"

    msg "The parameters you enter below will be used when forming the"
    msg "component values of the client and server certificates."
    msg "Choose values that correspond to your locality and team."
    msg "(Default values are contained within brackets)"
    msg ""

    prompt "Enter your country code [$COUNTRY]: " REPLY
    if [ "$REPLY" != "" ]; then
	COUNTRY=$REPLY
    fi

    prompt "Enter the name of your state or province [$STATE]: " REPLY
    if [ "$REPLY" != "" ]; then
	STATE=$REPLY
    fi

    prompt "Enter the name of your city [$CITY]: " REPLY
    if [ "$REPLY" != "" ]; then
	CITY=$REPLY
    fi

    prompt "Enter the name of your organization [$ORG]: " REPLY
    if [ "$REPLY" != "" ]; then
	ORG=$REPLY
    fi

    prompt "Enter your email address [$EMAIL]: " REPLY
    if [ "$REPLY" != "" ]; then
	EMAIL=$REPLY
    fi

    prompt "Enter the name of your organizational unit [$OU]: " REPLY
    if [ "$REPLY" != "" ]; then
	OU=$REPLY
    fi

    VARSFILE=$EDIR/vars

    sed -e "s/^#set_var \(EASYRSA_REQ_COUNTRY\).*/set_var\t\1\t\"$COUNTRY\"/" \
	-e "s/^#set_var \(EASYRSA_REQ_PROVINCE\).*/set_var\t\1\t\"$STATE\"/" \
	-e "s/^#set_var \(EASYRSA_REQ_CITY\).*/set_var\t\1\t\"$CITY\"/" \
	-e "s/^#set_var \(EASYRSA_REQ_ORG\).*/set_var\t\1\t\t\"$ORG\"/" \
	-e "s/^#set_var \(EASYRSA_REQ_EMAIL\).*/set_var\t\1\t\"$EMAIL\"/" \
	-e "s/^#set_var \(EASYRSA_REQ_OU\).*/set_var\t\1\t\t\"$OU\"/" \
	    $VARSFILE.example > $VARSFILE

    #
    # Initialize PKI files
    #
    msg "Initializing PKI files..."
    rm -rf $EDIR
    cp -R /usr/share/easy-rsa $EDIR
    mkdir $PKIDIR $PKIDIR/issued $PKIDIR/private $PKIDIR/reqs
    cp $EDIR/openssl-easyrsa.cnf $PKIDIR
    cd $EDIR

    #
    # Build Certificate Authority (CA)
    #
    msg "Building Certificate Authority (CA)..."
    dd if=/dev/urandom of=$PKIDIR/.rnd bs=1024 count=1
    ./easyrsa build-ca nopass

    #
    # Generate Certificate Signing Request (CSR) for VPN server
    #
    msg "Generating Certificate Signing Request (CSR) for VPN server..."
    ./easyrsa gen-req VPN_Server nopass

    #
    # Generate VPN server certificate
    #
    msg "Generating Certificate for VPN server..."
    ./easyrsa sign-req server VPN_Server

    #
    # Generate Diffie-Hellman (DH) parameters file
    #
    msg "Generating Diffie-Hellman (DH) parameters file..."
    #./easyrsa gen-dh
    openssl dhparam -dsaparam -out $PKIDIR/dh.pem 2048 || die "Please re-run"
    msg "DH parameters of size 2048 created"

    #
    # Generate a random key to be used as a shared secret
    #
    msg "Generating random shared secret key file..."
    openvpn --genkey --secret pki/ta.key

    #
    # Generate driver station VPN client certificate and key files
    #
    msg "Generating driver station VPN client certificate/key files..."
    ./easyrsa build-client-full DS_VPN_Client nopass

    #
    # Generate robot VPN client certificate and key files
    #
    msg "Generating robot VPN client certificate/key files..."
    ./easyrsa build-client-full Robot_VPN_Client nopass

    #
    # Generate auxiliary VPN client certificate and key files
    #
    msg "Generating auxiliary VPN client certificate/key files..."
    ./easyrsa build-client-full Aux_VPN_Client nopass

    #
    # Put all files needed by VPN clients into personal Github repository
    #
    msg "Copying client PKI files into personal Github repository..."
    cd $PI_HOME/$GITHUB_REPO
    cp $PKIDIR/ca.crt $PKIDIR/ta.key .
    cp $PKIDIR/issued/*_VPN_Client.crt .
    cp $PKIDIR/private/*_VPN_Client.key .
    cat << EOF > VPN_Server_ipaddr
$SERVER_IPADDR
$SERVER_PORT
EOF
    git add ca.crt ta.key *_VPN_Client.* VPN_Server_ipaddr
    git commit --message="VPN client configuration files for Team $TEAM_NUMBER"
    git push

    #
    # Create openvpn configuration file for VPN server
    #
    msg "Installing openvpn configuration file for VPN server..."
    cp $PI_HOME/robot-vpn/openvpn.conf-VPN_Server $VDIR/openvpn.conf
    sed -i "s/10.TE.AM/$TEAM_NETWORK/g" $VDIR/openvpn.conf

    msg "VPN server successfully set up; you can now set up the VPN clients"
    msg "Note: Make sure to set up a port forwarding rule on your router"
    msg "that forwards UDP port $SERVER_PORT to the IP address of the Raspberry Pi."
    msg "Type 'sudo reboot' to start up the VPN server"
}

#
# Main script
#
PI_HOME=/home/pi
umask 77
SETUP_INFO="$PI_HOME/.vpn-setup-info"
VDIR=/etc/openvpn
EDIR=$VDIR/easy-rsa
PKIDIR=$EDIR/pki

#
# Check for previous VPN installation
#
if [ -d $PKIDIR ]; then
    prompt "Previous VPN installation detected; re-install? [n] " REPLY
    if [ "$REPLY" != "y" -a "$REPLY" != "yes" ]; then
	die "Setup canceled"
    fi
    msg "Removing VPN configuration, log, and status files..."
    rm -rf $EDIR/vars $PKIDIR /run/openvpn/* /var/log/openvpn/*
    msg "Removing bridging script..."
    rm -f /etc/init.d/bridge /etc/rc2.d/S01bridge
    msg "Restoring contents of /etc/dhcpcd.conf file..."
    sed -i '/^denyinterfaces eth0/d' /etc/dhcpcd.conf
fi

msg " "
msg "OpenVPN server and client setup for Raspberry Pi for use with FRC robots"
msg "In the following prompts, defaults are noted in square brackets []"
msg " "

#
# Establish initial setup defaults
#
GITHUB_USER="my-user"
GITHUB_TOKEN="my-token"
GITHUB_REPO="vpnconfig"
TEAM_NUMBER="2220"

#
# Load previously saved VPN setup info, if any
#
if [ -f $SETUP_INFO ]; then
    . $SETUP_INFO
fi

#
# Prompt for VPN setup info and team number using loaded info as defaults
#
prompt "Enter Github user name [$GITHUB_USER]: " REPLY
if [ "$REPLY" != "" ]; then
    GITHUB_USER=$REPLY
fi

prompt "Enter Github personal access token [$GITHUB_TOKEN]: " REPLY
if [ "$REPLY" != "" ]; then
    GITHUB_TOKEN=$REPLY
fi

prompt "Enter Github repository name [$GITHUB_REPO]: " REPLY
if [ "$REPLY" != "" ]; then
    GITHUB_REPO=$REPLY
fi

prompt "Enter team number [$TEAM_NUMBER]: " REPLY
if [ "$REPLY" != "" ]; then
    TEAM_NUMBER=$REPLY
fi

msg "Saving VPN setup info in $SETUP_INFO"
cat << EOF > $SETUP_INFO
GITHUB_USER=$GITHUB_USER
GITHUB_TOKEN=$GITHUB_TOKEN
GITHUB_REPO=$GITHUB_REPO
TEAM_NUMBER=$TEAM_NUMBER
EOF

#
# Calculate the team subnet (10.TE.AM)
#
TEAM_NETWORK=10.`expr $TEAM_NUMBER / 100`.`expr $TEAM_NUMBER % 100`

#
# Clone the personal repository created earlier
#
cd $PI_HOME
if [ -d "$PI_HOME/$GITHUB_REPO" ]; then
    msg "Updating existing repository: $GITHUB_REPO"
    cd $GITHUB_REPO
    git pull
    cd ..
else
    msg "Creating local repository: $GITHUB_REPO"
    git clone https://${GITHUB_TOKEN}:x-oauth-basic@github.com/$GITHUB_USER/$GITHUB_REPO || die "Please re-run setup"
fi

if [ ! -d "$PI_HOME/$GITHUB_REPO" ]; then
    die "Please run script again with proper user, token, and repository name"
fi

#
# Update Raspberry Pi OS to latest version of packages
# and install all packages required for proper VPN setup.
#
prompt "Update your OS with the latest patches (recommended)? [y] " REPLY
if [ "$REPLY" = "" -o "$REPLY" = "y" -o "$REPLY" = "yes" ]; then
    msg "Updating package index..."
    apt-get -y update || die "Please re-run setup"

    msg "Installing newest versions of all packages..."
    apt-get -y upgrade || die "Please re-run setup"
else
    msg "Skipping OS updates"
fi

msg "Installing required additional packages..."
apt-get -y install openvpn unzip bridge-utils || die "Please re-run setup"

msg "Reconfiguring time zone data..."
dpkg-reconfigure -u tzdata || die "Please re-run setup"

#
# Prompt for VPN setup type
#
prompt "Enter setup type (server, ds, robot, or aux): " SETUP_TYPE

case $SETUP_TYPE in

    server)
	setup_server
	;;

    robot|ds|aux)
	setup_client
	;;

    *)
	die "Unknown setup type: $SETUP_TYPE"
	;;
esac
