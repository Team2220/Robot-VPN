#!/bin/sh
#
# setup-vpn: Install and configure OpenVPN server or client on Raspberry Pi
#
# Before running this script, create a private Github repository
# using the following instructions:
# - Go to https://github.com in your favorite browser
# - Sign in to your Github account (or create one first using Sign up)
# - Click the green New button to create a new repository
# - Choose a Repository name (e.g. Team2220-VPN-Files)
# - (Optional) Enter a description (e.g. Team 2220 VPN Configuration Files)
# - Select Private (since these files will allow access to your VPN)
# - Check the "Add a README file" box
# - Click the green "Create repository" button
#
# Now create a personal access token if you have not already done so for
# your Github account using instructions found here:
# https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token
# Here's the actual steps:
# - Verify your email address, if it hasn't been verified yet
# - In the upper-right corner, click your profile photo, then click Settings
# - In the left sidebar, click Developer settings
# - Click "Personal access tokens"
# - Click "Generate new token"
# - Give token a descriptive name (e.g. VPN setup for Team 2220)
# - Select scope 'repo'
# - Click Generate token
# - Click the symbol to the right of the hex token string to copy to clipboard
# - Immediately paste the token into a file for use later on the Raspberry Pi
#
# Now power up each Raspberry Pi and run the VPN setup script by bringing up
# a terminal window and entering the following commands:
#	sudo bash
#	rm -rf Robot-VPN
#	git clone https://github.com/Team2220/Robot-VPN
#	./Robot-VPN/setup-vpn
# Follow all the prompts in order to set up each Raspberry Pi as either the
# VPN server, robot client, driver station client, or an auxiliary client.

PI_HOME=/home/pi
cd $PI_HOME
umask 77
SETUP_INFO=".vpn-setup-info"
VDIR=/etc/openvpn
EDIR=$VDIR/easy-rsa
PKIDIR=$EDIR/pki

cat << "EOF" 1>&2

OpenVPN server and client setup for Raspberry Pi for use with FRC robots

In the following prompts, defaults are noted in square brackets []
where [none] indicates that it is a required parameter

EOF

GITHUB_USER="my-user"
GITHUB_TOKEN="none"
GITHUB_REPO="my-vpn-files"

#
# Load previously saved VPN setup info, if any
#
if [ -x $SETUP_INFO ]; then
    . $SETUP_INFO
fi

#
# Prompt for VPN setup info using loaded info as defaults
#
echo -n "Enter your Github user name [$GITHUB_USER]: "
read REPLY
if [ "x$REPLY" != "x" ]; then
    GITHUB_USER=$REPLY
fi

echo -n "Enter your Github personal access token [$GITHUB_TOKEN]: "
read REPLY
if [ "x$REPLY" != "x" ]; then
    GITHUB_TOKEN=$REPLY
fi

echo -n "Enter your Github personal repository name [$GITHUB_REPO]: "
read REPLY
if [ "x$REPLY" != "x" ]; then
    GITHUB_REPO=$REPLY
fi

cat << "EOF" > $SETUP_INFO
GITHUB_USER=$GITHUB_USER
GITHUB_TOKEN=$GITHUB_TOKEN
GITHUB_REPO=$GITHUB_REPO
EOF

#
# Clone the empty personal repository created earlier
#
cd $PI_HOME
git clone https://${GITHUB_TOKEN}:x-oauth-basic@github.com/$GITHUB_USER/$GITHUB_REPO

if [ ! -d "$PI_HOME/$GITHUB_REPO" ]; then
    echo "Please run script again with proper user, token, and repository name"
    exit 1
fi

#
# Install necessary updates and RPM packages
#
apt-get -y update
apt-get -y upgrade
apt-get -y install openvpn unzip bridge-utils
dpkg-reconfigure tzdata

#
# Prompt for team number and calculate team network prefix
#
TEAM_NUMBER=2220
echo -n "Enter your team number [$TEAM_NUMBER]: "
read REPLY
if [ "x$REPLY" != "x" ]; then
    TEAM_NUMBER=$REPLY
fi

TEAM_NETWORK=10.`expr $TEAM_NUMBER / 100`.`expr $TEAM_NUMBER % 100`

#
# Prompt for VPN server IP address / host name
#
SERVER_IPADDR=robotvpn.domain.com
echo -n "Enter the VPN server's public IP address/host name [$SERVER_IPADDR]: "
read REPLY
if [ "x$REPLY" != "x" ]; then
    SERVER_IPADDR=$REPLY
fi

#
# Prompt for VPN setup type
#
SETUP_TYPE=none
echo -n "Enter setup type (server, ds, robot, or aux) [$SETUP_TYPE]: "
read REPLY
if [ "x$REPLY" != "x" ]; then
    SETUP_TYPE=$REPLY
fi

case $SETUP_TYPE in

    server)
	setup_server
	;;

    ds)
	setup_ds_client
	;;

    robot)
	setup_robot_client
	;;

    aux)
	setup_aux_client
	;;

    *)
	echo "Unknown setup type: $SETUP_TYPE" 1>&2
	exit 1
	;;
esac

exit 0

#
# Setup functions for each setup type start here
#

setup_aux_client()
{
    echo "Auxiliary VPN client successfuly set up" 1>&2
}

setup_ds_client()
{
    BRIDGE_IPADDR=$TEAM_NETWORK.253
    echo -n "Enter your static bridge IP address [$BRIDGE_IPADDR]: "
    read REPLY
    if [ "x$REPLY" != "x" ]; then
	BRIDGE_IPADDR=$REPLY
    fi

    rm -rf $EDIR
    cp -R /usr/share/easy-rsa $EDIR

    #
    # Initialize PKI files
    #
    cd $EDIR
    ./easyrsa init-pki
    mkdir pki/issued

    #
    # Load driver station client configuration files from private Github repo
    #
    cd $PI_HOME/$GITREPO
    cp openvpn.conf-DS_VPN_Client $VDIR/openvpn.conf
    sed -i "s/robotvpn.domain.com/$SERVER_IPADDR/" $VDIR/openvpn.conf
    cp ca.crt ta.key $PKIDIR
    cp DS_VPN_Client.crt $PKIDIR/issued
    cp DS_VPN_Client.key $PKIDIR/private
    cp bridge.sh /etc/init.d/bridge
    sed -i "s/10.TE.AM.251/$BRIDGE_IPADDR/g" /etc/init.d/bridge
    sed -i "s/10.TE.AM/$TEAM_NETWORK/g" /etc/init.d/bridge
    rm -f /etc/rc2.d/S01bridge
    ln -s ../init.d/bridge /etc/rc2.d/S01bridge
    chmod a+rx /etc/init.d/bridge
    echo "denyinterfaces eth0" >> /etc/dhcpcd.conf

    echo "Driver station VPN client successfuly set up" 1>&2
}

setup_robot_client()
{
    BRIDGE_IPADDR=$TEAM_NETWORK.251
    echo -n "Enter your static bridge IP address [$BRIDGE_IPADDR]: "
    read REPLY
    if [ "x$REPLY" != "x" ]; then
	BRIDGE_IPADDR=$REPLY
    fi

    rm -rf $EDIR
    cp -R /usr/share/easy-rsa $EDIR

    #
    # Initialize PKI files
    #
    cd $EDIR
    ./easyrsa init-pki
    mkdir pki/issued

    #
    # Load robot client configuration files from private Github repo
    #
    cd $PI_HOME/$GITREPO
    cp openvpn.conf-Robot_VPN_Client $VDIR/openvpn.conf
    sed -i "s/robotvpn.domain.com/$SERVER_IPADDR/" $VDIR/openvpn.conf
    cp ca.crt ta.key $PKIDIR
    cp Robot_VPN_Client.crt $PKIDIR/issued
    cp Robot_VPN_Client.key $PKIDIR/private
    cp bridge.sh /etc/init.d/bridge
    sed -i "s/10.TE.AM.251/$BRIDGE_IPADDR/g" /etc/init.d/bridge
    sed -i "s/10.TE.AM/$TEAM_NETWORK/g" /etc/init.d/bridge
    rm -f /etc/rc2.d/S01bridge
    ln -s ../init.d/bridge /etc/rc2.d/S01bridge
    chmod a+rx /etc/init.d/bridge
    echo "denyinterfaces eth0" >> /etc/dhcpcd.conf

    echo "Robot VPN client successfuly set up" 1>&2
}

setup_server()
{
    #
    # Prompt for SSL certificate identifiers
    # COUNTRY, STATE, CITY, ORG, EMAIL, and OU, e.g.:
    # US, Minnesota, Eagan, EHS Robotics, ca@eaganrobotics.com, Team 2220
    #
    rm -rf $EDIR
    cp -R /usr/share/easy-rsa $EDIR/

    #
    # Make vars file by prompting for Certificate Authority (CA) parameters
    #
    cd $EDIR

    COUNTRY="US"
    STATE="Minnesota"
    CITY="Eagan"
    ORG="EHS Robotics"
    EMAIL="ca@eaganrobotics.com"
    OU="Team 2220"

    echo "The parameters you enter below will be used when forming the"
    echo "component values of the client and server certificates."
    echo "Choose values that correspond to your locality and team."
    echo "(Default values are contained within brackets)"
    echo ""

    echo -n "Enter your country code [$COUNTRY]: "
    read REPLY
    if [ "x$REPLY" != "x" ]; then
	COUNTRY=$REPLY
    fi

    echo -n "Enter the name of your state or province [$STATE]: "
    read REPLY
    if [ "x$REPLY" != "x" ]; then
	STATE=$REPLY
    fi

    echo -n "Enter the name of your city [$CITY]: "
    read REPLY
    if [ "x$REPLY" != "x" ]; then
	CITY=$REPLY
    fi

    echo -n "Enter the name of your organization [$ORG]: "
    read REPLY
    if [ "x$REPLY" != "x" ]; then
	ORG=$REPLY
    fi

    echo -n "Enter your email address [$EMAIL]: "
    read REPLY
    if [ "x$REPLY" != "x" ]; then
	EMAIL=$REPLY
    fi

    echo -n "Enter the name of your organizational unit [$OU]: "
    read REPLY
    if [ "x$REPLY" != "x" ]; then
	OU=$REPLY
    fi

    VARSFILE=$EDIR/vars

    sed -e "s/^#set_var \(EASYRSA_REQ_COUNTRY\).*/set_var\t\1\t\"$COUNTRY\"/" \
	-e "s/^#set_var \(EASYRSA_REQ_PROVINCE\).*/set_var\t\1\t\"$STATE\"/" \
	-e "s/^#set_var \(EASYRSA_REQ_CITY\).*/set_var\t\1\t\"$CITY\"/" \
	-e "s/^#set_var \(EASYRSA_REQ_ORG\).*/set_var\t\1\t\t\"$ORG\"/" \
	-e "s/^#set_var \(EASYRSA_REQ_EMAIL\).*/set_var\t\1\t\"$EMAIL\"/" \
	-e "s/^#set_var \(EASYRSA_REQ_OU\).*/set_var\t\1\t\t\"$OU\"/" \
	    $VARSFILE.example > $VARSFILE

    #
    # Initialize PKI files
    #
    cd $EDIR
    ./easyrsa init-pki

    #
    # Build Certificate Authority (CA)
    #
    ./easyrsa build-ca nopass

    #
    # Generate Certificate Signing Request (CSR) for VPN server
    #
    ./easyrsa gen-req VPN_Server nopass

    #
    # Sign and generate VPN server certificate
    #
    ./easyrsa sign-req server VPN_Server

    #
    # Generate Diffie-Hellman parameters (DH) file
    #
    ./easyrsa gen-dh

    #
    # Generate a random key to be used as a shared secret
    #
    openvpn --genkey --secret pki/ta.key

    #
    # Generate driver station VPN client certificate and key files
    #
    ./easyrsa build-client-full DS_VPN_Client nopass

    #
    # Generate robot VPN client certificate and key files
    #
    ./easyrsa build-client-full Robot_VPN_Client nopass

    #
    # Put all files needed by VPN clients into personal Github repository
    #
    cd $PI_HOME/$GITHUB_REPO
    cp $PKIDIR/ca.crt $PKIDIR/ta.key .
    cp $PKIDIR/issued/*_VPN_Client.crt .
    cp $PKIDIR/private/*_VPN_Client.key .
    git add ca.crt ta.key *_VPN_Client.*
    git commit
    git push

    #
    # Create openvpn configuration file for VPN server
    #
    cp $PI_HOME/Robot-VPN/openvpn.conf-VPN_Server $VDIR/openvpn.conf
    sed -i "s/10.TE.AM/$TEAM_NETWORK/g" $VDIR/openvpn.conf

cat << "EOF" 1>&2
VPN server successfuly set up

  Note: Make sure to set up a port forwarding rule on your router
  that forwards UDP port 1194 to the IP address of the Raspberry Pi

EOF
}
